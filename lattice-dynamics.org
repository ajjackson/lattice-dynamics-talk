#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: reveal_title_slide:"<h2>%t</h2><h2>%a</h2><h3>%e</h3>"
#+OPTIONS: toc:nil
#+REVEAL_ROOT: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+BEAMER_FRAME_LEVEL: 2

#+TITLE: Lattice Dynamics For Great Justice
#+AUTHOR: Adam J. Jackson
#+EMAIL: adam.jackson@ucl.ac.uk

* Scope

** Included in this talk
   - Lattice vibrations and phonons
   - Understanding phonon band structures
   - Calculating harmonic phonons
   - Dealing with anharmonicity

** Not included in this talk
   - Detailed derivations
   - Perturbation theory
   - Electron-phonon coupling
   - Group theory

* Lattice vibrations

** Vibrations
   #+ATTR_REVEAL: :frag (appear)
   - Matter doesn't sit still, ever
   - Here's a gas of NaK molecules at 500 nK:
     https://doi.org/10.1103/PhysRevLett.114.205302
   - Authors claimed to reach a "rovibrational ground state"
     - i.e. it's still spinning and vibrating
     - (but hyperfine stuff is happening so it's complicated)

   #+REVEAL: split
   - By contrast, total energies from /ab initio/ calculations
     generally don't include motion
     $$E_\mathrm{DFT} = E_\mathrm{kin,elec} + E_\mathrm{pot,nuc-nuc} + E_\mathrm{pot,elec-elec} + E_\mathrm{pot,nuc-elec}$$
   - /Maybe/ we include some electronic excitations
   - This is not the ground state! The real ground state includes zero-point movements.

** Lattice models
   - All of these models relate to /crystals/ in which there is a
     repeating unit of nominal atom sites
   - These methods cannot be applied to liquids/gases, and are
     difficult to apply to amorphous systems
   - For a wider range of systems we can use molecular dynamics
     - but MD results converge slowly over many samples
     - whereas lattice models give exact solutions


* Phonon band structures

** 1D example

   Consider transverse waves in a _finite_ 1D chain

   [[./diagrams/1d_low_freq.svg]]

   - Harmonic series of vibrational states
   - States characterised by frequency and wave vector

   #+REVEAL: split

    #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
     #+ATTR_HTML: :width 50%
     [[./diagrams/1d_high_freq.svg]]
    #+REVEAL_HTML: </div>

   #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
   #+ATTR_REVEAL: :frag (appear)
   - At high wave vectors, displacements are indistinguishable from
     low wave vector
   - So we can limit our sampling to a restricted range of wavevectors...
   - ... the Brillouin zone!
   #+REVEAL_HTML: </div>
   
   #+REVEAL: split
   - The lowest obtainable frequency and wave vector depend on the
     system size
   - Infinite crystal ‚Üí zero wave vector, zero vibrational energy

     [[./diagrams/1d_lowest_freq.svg]]

   #+REVEAL: split
   Putting it all together:

   #+BEGIN_SRC python :exports results :results file
     import numpy as np
     import matplotlib
     matplotlib.use('Agg')
     import matplotlib.pyplot as plt
     with plt.xkcd():
         fig = plt.figure()
         ax = fig.add_subplot(1, 1, 1)
         x = np.linspace(0, 1, 50)
         ax.plot(x, -(x - 2)**2 + 4)

         ax.set_xticks([])
         ax.set_xlabel('$\mathbf{q}$')
         ax.set_yticks([])
         ax.set_ylabel('Frequency')
         ax.set_xlim((0, 1))
         ax.set_ylim((0, 3.5))

         fig.savefig('plots/1d-dispersion.svg')

     return('plots/1d-dispersion.svg')
   #+END_SRC

   #+RESULTS:
   [[file:plots/1d-dispersion.svg]]

   #+REVEAL: split

   And if we have different force constants in different directions:

   #+BEGIN_SRC python :exports results :results file
     import numpy as np
     import matplotlib
     matplotlib.use('Agg')
     import matplotlib.pyplot as plt

     filename = 'plots/3d-dispersion-1d-chain.svg'
     with plt.xkcd():
         fig = plt.figure()
         ax = fig.add_subplot(1, 1, 1)
         x = np.linspace(0, 1, 50)

         y = -(x - 2)**2 + 4

         ax.plot(x, y, label='Transverse (a)')
         ax.plot(x, y * 0.7, label='Transverse (b)')
         ax.plot(x, y * 1.3, label='Longitudinal')

         ax.set_xticks([])
         ax.set_xlabel('$\mathbf{q}$')
         ax.set_yticks([])
         ax.set_ylabel('Frequency')
         ax.set_xlim((0, 1))
         ax.set_ylim((0, 4))

         fig.savefig(filename)

     return(filename)
   #+END_SRC

   #+RESULTS:
   [[file:plots/3d-dispersion-1d-chain.svg]]

   These are the "acoustic" phonon branches

** 3D example: Zirconium metal
   - Body-centered cubic structure
   - 1-atom primitive cell

     [[./plots/heiming_Zr.png]]

   /Heiming et al. (1991) Phys. Rev. B **43** 10948/

   #+REVEAL: split
   [[./plots/heiming_Zr.png]]

   - Near-linear dispersion about Œì
   - Three branches (transverse/longitudinal), degenerate in some directions
   - Approaches zero at 2/3(1,1,1)
     - Ordered stacking in 111 direction: metastable ùúî-phase

** Acoustic / optical modes: Zinc blende
   [[./plots/zns_noloto.svg]]

   - Degenerate "acoustic" branches based on collective behaviour of cell
   - "Optic" branches based on interactions within cell
     - So-named because they are active at long wave vector lengths (i.e. near Œì)
     - This is requirement for detection with IR, Raman spectroscopy

   #+REVEAL: split
   #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
   $$\mathbf{q} = \Gamma$$

   [[./diagrams/noloto_gamma.gif]]
   #+REVEAL_HTML: </div>

   #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
   $$\mathbf{q} = \mathrm{X}$$

   [[./diagrams/noloto_X.gif]]
   #+REVEAL_HTML: </div>

   - Degenerate "acoustic" branches based on collective behaviour of cell
   - "Optic" branches based on interactions within cell
     - So-named because they are active at long wave vector lengths (i.e. near Œì)
     - This is requirement for detection with IR, Raman spectroscopy

   #+REVEAL: split
   - A more realistic ZnS model
     - LO-TO splitting due to long-range polarisation effects
       - (Longitudinal Optic-Transverse Optic)
     - In calculations we account for this using Born effective charges

   [[./plots/zns_loto.svg]]

   #+REVEAL: split

   #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
   $$\mathbf{q} \approx \Gamma$$

   [[./diagrams/loto_gamma.gif]]
   #+REVEAL_HTML: </div>

   #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
   $$\mathbf{q} = \mathrm{X}$$

   [[./diagrams/loto_X.gif]]
   #+REVEAL_HTML: </div>

   #+ATTR_HTML: :width 30%
   [[./plots/zns_loto.svg]]

   #+REVEAL: split

   #+ATTR_HTML: :width 30%
   [[./plots/shibuya2016.jpg]]

   /Shibuya et al. (2016) APL Mater. **4** 104809/
   - LO-TO splitting can lead to discontinuities at Œì

** Example: Zinc metal
   - Hexagonal structure
   - 2-atom primitive cell

   #+ATTR_HTML: :width 70%
   [[./plots/Almqvist-composite.png]]

   /Composite from Almqvist, L. & Stedman, R. (1971) J. Phys. F.: Met. Phys. **1** 312/

   #+REVEAL: split
   #+ATTR_HTML: :width 60%
   [[./plots/Almqvist-composite.png]]

   - Linear dispersion assumed about Œì
   - Six branches, degeneracy in A direction
   - Optical modes appear as "reflection" in A of acoustic modes


* Calculating harmonic phonons

** Harmonic modes
   - In the harmonic approximation, movements are based on Hooke's law
     $$\mathbf{F} = - k \mathbf{u}$$
     where $\mathbf{u}$ is a displacement
   - The force constant matrix $\mathbf{\Phi}$ collects these "spring
     constants" in each direction between each atom in the
     system
   - The dynamical matrix $\mathbf{D}$ is a Fourier transform of
     $\mathbf{\Phi}$ that also accounts for mass
   - The eigenvalue problem
     $$\omega^2(\mathbf{q})\epsilon(\mathbf{q}) = \mathbf{D}(\mathbf{q})\epsilon(\mathbf{q})$$
     can then be solved (where $\epsilon$ is a mass-weighted collective displacement)
     to yield frequencies and eigenvectors
   - Vibrational movement is treated as a linear combination of these orthogonal "modes"

** The direct method
   - Sometimes referred to as the "supercell" or "finite displacement" method
   - Assemble the force constant matrix directly using Hooke's law
   - Make finite diplacements in each direction and compute force with /ab initio/ methods.
     - Use a supercell to get meaningful interactions with periodic images
     - Use symmetry to reduce number of displacements required

   [[./diagrams/direct-method.svg]]

** Density functional perturbation theory
   - In principle this is "the clever way"
   - DFT reformulated to obtain response to perturbations in ionic position
     - obtain force constants (second derivative in energy)
     - calculation cost increases with each perturbation considered
   - Implementation is complex. Legends of DFPT are
     - Stefano Baroni (SISSA, Quantum Espresso)
     - Xavier Gonze (UCLouvain, Abinit)


** Pros/cons

   | Direct method                                               | DFPT                              |
   |-------------------------------------------------------------+-----------------------------------|
   | Linear scaling for large cells                              | Lower cost for small cells        |
   | More tolerant of imperfect structure                        | No need to converge displacements |
   | Exact force constants for qpts commensurate with supercell  | Large supercells very expensive   |
   | Displacement calculations can be distributed over many jobs | Restart unavailable in VASP       |

   - Both methods can be managed with Phonopy

** Model fitting
   - Rather than sampling displacements individually with /ab initio/
     calculations, a model can be fitted from experimental data and/or
     calculations
   - Interatomic forcefield parameters can be fitted to data and then
     used with the "direct" method (e.g. using GULP)
   - Alternatively the force constant matrix can be fitted directly by
     sampling from an ensemble of displacements
     - This method is implemented in TDEP

* Imaginary modes and zone-boundary transitions

** Imaginary modes
   - Sometimes you will find "negative" frequencies on plot. What does this mean?
     - $\omega$ is actually an imaginary number!
     - $\omega^2 < 0$
     - Restoring force along the mode is negative
     - Structure "wants" to move away from initial lattice

   #+REVEAL: split
   - At Œì, imaginary mode usually means your structure is not correctly optimised
   - Displacement managed to lower energy

   #+ATTR_HTML: :width 70%
     [[./diagrams/bad-displacement.svg]]

   #+REVEAL: split
   Imaginary modes /close to/ Œì are generally associated with
   calculation accuracy problems.
   - Basis-set / k-point convergence
   - Supercell size
   - FFT grids

   #+ATTR_HTML: :width 50%
   [[./plots/skelton-softmodes.png]]
   
   Jonathan Skelton has some helpful slides on these issues
    https://www.slideshare.net/jmskelton/phonons-phonopy-pro-tips-2015

** Case study: Methylammonium lead iodide
   - Indicate ordering over multiple unit cells

   #+ATTR_HTML: :width 80%
   [[./plots/whalley2017.jpg]]

   /Whalley et al. (2017) J. Chem. Phys. **146** 220901/


** How to find zone-boundary ground states
   - Build a supercell which is commensurate with the wave vector
     - e.g. if soft mode is around (0.5 0 0.5), you need a $2\times1\times2$ supercell
   - Give it a "nudge" along the mode and perform local optimisation from there
   - Phonopy's MODULATION feature is helpful for setting these calculations up
   - Compare the energy of the new supercell to your original structure
   - Try calculating phonons again with the new structure...

* The phonon DOS

** Phonon DOS
   - The phonon DOS is a distribution of accessible vibrational states
   - Occupied with a thermal distribution of quantised excitations: "phonons"
     - Like electronic DOS, which follows Fermi-Dirac statistics
       - (electrons are fermions)
     - Phonon DOS is occupied by Bose-Einstein distribution
       - (phonons are bosons)

** Projected phonon DOS
   - Projected DOS (PDOS) can also be constructed
     - weighting assigned using mode eigenvectors
     - tells us what is moving in which frequency range
   - Less informative than dispersion plot and inspecting eigenvectors
     - but much easier to interpret in busy system

  [[./plots/zns_pdos.svg]]


** Stat mechs

   - This distribution of states is used in thermodynamic partition functions
     - vibrational energy as a function of temperature
     - related by calculus to heat capacity, entropy, free energy

    #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
    Zinc blende
    #+ATTR_HTML: :width 60%
    [[./plots/zincblende_band_dos.svg]]
    #+REVEAL_HTML: </div>

    #+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
    Wurtzite
    #+ATTR_HTML: :width 60%
    [[./plots/wurtzite_band_dos.svg]]
    #+REVEAL_HTML: </div>

   #+REVEAL: split

   - Vibrational properties of zinc blende and wurtzite phases of ZnS
     are different
     - Wurtzite phase is higher in energy
     - Compare vib entropy, free energy relationship with T

   #+BEGIN_SRC python :exports results :results file
     filename = 'plots/thermal.svg'
     import yaml
     import matplotlib.pyplot as plt

     plt.figure(figsize=(6, 3))

     for i, phase in enumerate(('zincblende', 'wurtzite')):
         plt.subplot(1, 2, i + 1)

         with open('plots/{}_thermal.yaml'.format(phase), 'r') as f:
             data = yaml.load(f)

         T_A_S_Cv_U = [(x['temperature'], x['free_energy'], x['entropy'],
                        x['heat_capacity'], x['energy'])
                           for x in data['thermal_properties']]

         T, A, S, Cv, U = zip(*T_A_S_Cv_U)

         if phase == 'zincblende':
             scale = 1
         elif phase == 'wurtzite':
             scale = 0.5
         else:
             raise Exception()        

         for v, label in ((A, 'Free energy / kJ/mol'),
                          (S, 'Entropy / J/K/mol'),
                          (Cv, 'Heat capacity / J/K/mol'),
                          (U, 'Energy / kJ/mol')):
             plt.plot(T, [y * scale for y in v], label=label)

         plt.ylim(-80, 140)
         plt.xlim(0, 1000)
         plt.xlabel('Temperature / K')
         plt.title(phase)

         plt.legend(loc='above')
     plt.tight_layout()

     plt.savefig(filename)

     return filename
   #+END_SRC

   #+RESULTS:
   [[file:plots/thermal.svg]]

   #+REVEAL: split
   - We can predict phase transition by plotting free energy vs
     temperature, including difference in formation energy

   #+BEGIN_SRC python :exports results :results file
          filename = 'plots/zincblend_to_wurtzite.svg'
          import yaml
          import matplotlib.pyplot as plt
          from scipy.constants import physical_constants, N_A

          plt.figure(figsize=(6, 3))

          for phase in ('zincblende', 'wurtzite'):

              with open('plots/{}_thermal.yaml'.format(phase), 'r') as f:
                  data = yaml.load(f)

              T_A = [(x['temperature'], x['free_energy'])
                                for x in data['thermal_properties']]

              T, A = zip(*T_A)

              if phase == 'zincblende':
                  scale = 1
                  toten = -7.58677035
              elif phase == 'wurtzite':
                  scale = 0.5        
                  toten = -15.16417449
              else:
                  raise Exception()        

              toten = (toten *
                       scale * N_A * 1e-3 *
                       physical_constants['electron volt-joule relationship'][0])

              plt.plot(T, [y * scale + toten for y in A], label=phase)

              plt.xlim(0, 1000)
              plt.xlabel('Temperature / K')
              plt.ylabel('Free energy / kJ/mol')

              plt.legend(loc='best')
          plt.tight_layout()

          plt.savefig(filename)

          return filename
   #+END_SRC

   #+RESULTS:
   [[file:plots/zincblend_to_wurtzite.svg]]

   - In this case, it doesn't seem sufficient to drive the phase transition!

* Dealing with anharmonicity: QHA

  - Real potential energy surfaces are not symmetric
  - As atoms move more, their average location moves to the shallow
    side of the well
  - This drives thermal expansion

  #+REVEAL: split
  - In the quasi-harmonic approximation (QHA), we consider the effect
    of thermal expansion on the otherwise harmonic vibration model
  - Force constants are recalculated at different volumes

    #+ATTR_HTML: :width 50%
    [[./plots/zao-qha.png]]

  #+REVEAL: split  
  - Helmholtz free energy ($A$) is computed vs temperature for each volume
  - At a given temperature, the structure should minimise $A$ at equilibrium
    - Competing volumes are just like competing phases (with easier kinetics!)
  - Interpolate between calculated volumes to obtain equation of state

   #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
   #+ATTR_HTML: :width 60%
   [[./plots/zao-helmholtz.png]]
   #+REVEAL_HTML: </div>

   #+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
   #+ATTR_HTML: :width 80%
   [[./plots/zao-expansion.svg]]
   #+REVEAL_HTML: </div>

  #+REVEAL: split
  - The quasi-harmonic approximation (QHA) tends to improve the accuracy of
    thermodynamic property calculations
  - QHA also provides very useful qualitative information about how
    phase transitions relate to thermal expansion
  - In practice it seems to improve accuracy of calculated frequencies
  - However, it ultimately works by representing anharmonic wells with
    softer harmonic wells. It will break down if atoms are truly
    moving in interesting asymmetric ways.

* Dealing with anharmonicity: higher-order phonons
  - An alternative approach to anharmonicity is to consider the
    harmonic approximation as the first part of a Taylor expansion
  - In this case, the higher-order terms represent interactions
    between the lower-order terms
  - In the limit of a complete series, this would completely cover
    anharmonicity
    - It is not guaranteed that using a truncated series will help
    - We have to truncate the series for practical calculations
  - Phonon-phonon interactions are generally computed when we are
    interested in their scattering effects
    - e.g. when predicting thermal conductivity


* Summary
  - Lattice dynamics describe collective movements in a crystal
  - This determines:
    - Measurable IR/Raman frequencies
    - Thermochemistry (Temperature-dependent potentials)
    - Dynamic stability / phase transitions
  - And opens the way to
    - Thermal conductivity (need higher-order terms)
    - Raman intensities (need mode-dependent polarisability)

  #+REVEAL: split
  - A range of calculation methods are available
    - Very sensitive; need precise of forces and optimisation
    - If forcefield available, GULP is cheap!
  - Generally start with harmonic approximation, Phonopy
    - Supercell method or DFPT, depending on unit cell size
  - QHA improves accuracy for ~ factor 10 in cost
  - Phono3py gives more information for MUCH greater cost
  - Still experimenting with TDEP
